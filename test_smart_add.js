const readline = require('readline');
const { getSlotInfoAPI1Only } = require('./menu/admin/manage_akrab/cekslot1.js');
require('dotenv').config({ quiet: true });

// Setup readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Utility functions
const getTimestamp = () => {
  const now = new Date();
  return now.toLocaleString('id-ID', {
    timeZone: 'Asia/Jakarta',
    year: 'numeric',
    month: '2-digit', 
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
};

const normalizePhone = (phone) => {
  if (!phone) return '';
  let clean = phone.replace(/\D/g, '');
  
  if (clean.startsWith('08')) {
    clean = '628' + clean.substring(2);
  } else if (clean.startsWith('8') && !clean.startsWith('62')) {
    clean = '62' + clean;
  }
  
  return clean;
};

// Parse multiple inputs (comma separated or line separated)
function parseMultiInput(input) {
  if (!input) return [];
  
  // Split by comma or newline, then clean each entry
  return input.split(/[,\n]/)
    .map(item => item.trim())
    .filter(item => item.length > 0);
}

// Smart ADD function - Auto generate parameters from CEKSLOT
async function smartAdd(parentPhone, tumbalPhone, aliasOverride = 'TUMBAL') {
  console.log('\n🧠 SMART ADD - Auto generating parameters...');
  console.log(`📱 Parent: ${parentPhone}`);
  console.log(`📱 Tumbal: ${tumbalPhone}`);
  console.log(`👤 Alias: ${aliasOverride}`);
  console.log(`⏰ Time: ${getTimestamp()}`);
  console.log('-'.repeat(50));
  
  try {
    // Step 1: Hit CEKSLOT API untuk mendapatkan slot info
    console.log('🔍 Step 1: Getting slot info from CEKSLOT API...');
    const startTime = Date.now();
    const slotResult = await getSlotInfoAPI1Only(normalizePhone(parentPhone));  // Normalisasi nomor parent
    const cekslotDuration = Date.now() - startTime;
    
    console.log(`⏱️  CEKSLOT Response Time: ${cekslotDuration}ms`);
    
    if (!slotResult.success) {
      console.log('❌ CEKSLOT failed, cannot proceed with ADD');
      console.log(`💬 Error: ${slotResult.error}`);
      return { success: false, error: slotResult.error, step: 'CEKSLOT' };
    }
    
    // Step 2: Filter slot kosong
    const emptySlots = slotResult.slots.filter(slot => 
      (!slot.alias || slot.alias === '-') && 
      (!slot.msisdn || slot.msisdn === '-') &&
      slot.add_chances > 0
    );
    
    console.log(`📊 Found ${slotResult.slots.length} total slots, ${emptySlots.length} empty slots`);
    
    if (emptySlots.length === 0) {
      console.log('❌ No empty slots available, cannot proceed with ADD');
      return { success: false, error: 'No empty slots available', step: 'SLOT_CHECK' };
    }
    
    // Step 3: Auto select slot pertama yang kosong
    const selectedSlot = emptySlots[0];
    const autoSlotId = selectedSlot.slot_id;
    const autoMemberId = selectedSlot.family_member_id;
    const autoAlias = aliasOverride;
    
    console.log('✅ Auto-generated parameters:');
    console.log(`   🎯 Slot ID: ${autoSlotId}`);
    console.log(`   🆔 Member ID: ${autoMemberId.substring(0, 30)}...`);
    console.log(`   👤 Alias: ${autoAlias}`);
    console.log(`   🎲 Add Chances: ${selectedSlot.add_chances}`);
    
    // Step 4: Execute ADD API dengan parameter yang auto-generated
    console.log('\n🚀 Step 2: Executing ADD API with auto-generated parameters...');
    const addResult = await executeAdd(normalizePhone(parentPhone), tumbalPhone, autoSlotId, autoAlias, autoMemberId);
    
    return {
      success: addResult.success,
      cekslotDuration,
      addDuration: addResult.duration,
      totalDuration: Date.now() - startTime,
      autoGenerated: {
        slotId: autoSlotId,
        memberId: autoMemberId,
        alias: autoAlias,
        addChances: selectedSlot.add_chances
      },
      addResult: addResult.data,
      error: addResult.error,
      step: addResult.success ? 'COMPLETED' : 'ADD'
    };
    
  } catch (error) {
    console.log('💥 SMART ADD EXCEPTION:');
    console.log(`📛 Error: ${error.message}`);
    return { success: false, error: error.message, step: 'EXCEPTION' };
  }
}

// Execute ADD API (helper function)
async function executeAdd(parentPhone, tumbalPhone, slotId, alias, memberId) {
  const axios = require('axios');
  
  try {
    const url = process.env.API1 + process.env.ADD1;
    const data = {
      token: process.env.APIKEY1,  // Menggunakan 'token' bukan 'api_key'
      id_parent: normalizePhone(parentPhone),  // Normalisasi nomor parent
      member_id: memberId,  // Menggunakan 'member_id' bukan 'family_member_id'
      msisdn: normalizePhone(tumbalPhone),  // Menggunakan 'msisdn' bukan 'member_msisdn'
      slot_id: slotId,
      alias: alias,
      parent_name: 'XL',  // Hardcode parent_name ke "XL"
      child_name: 'XL'    // Hardcode child_name ke "XL"
    };
    
    console.log('📤 Sending ADD request...');
    console.log('🔧 API URL:', url);
    console.log('📋 Request data:', {
      token: process.env.APIKEY1.substring(0, 10) + '...',
      id_parent: normalizePhone(parentPhone),  // Normalisasi nomor parent
      member_id: memberId.substring(0, 20) + '...',  // Menggunakan 'member_id' bukan 'family_member_id'
      msisdn: normalizePhone(tumbalPhone),  // Menggunakan 'msisdn' bukan 'member_msisdn'
      slot_id: slotId,
      alias: alias,
      parent_name: 'XL',  // Hardcode parent_name ke "XL"
      child_name: 'XL'    // Hardcode child_name ke "XL"
    });
    
    const startTime = Date.now();
    
    const response = await axios.post(url, new URLSearchParams(data), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      timeout: 25000
    });
    
    const duration = Date.now() - startTime;
    console.log(`⏱️  ADD Response Time: ${duration}ms`);
    
    if (response.data?.status === 'success' || response.data?.success === true || response.data?.status === true) {
      console.log('✅ ADD SUCCESS:');
      console.log(`📋 Response:`, JSON.stringify(response.data, null, 2));
      return { success: true, data: response.data, duration };
    } else {
      console.log('❌ ADD FAILED:');
      console.log(`📋 Response:`, JSON.stringify(response.data, null, 2));
      return { success: false, data: response.data, error: response.data?.message || 'ADD failed', duration };
    }
    
  } catch (error) {
    console.log('💥 ADD EXCEPTION:');
    console.log(`📛 Error: ${error.message}`);
    if (error.response) {
      console.log(`📋 Response Data:`, error.response.data);
    }
    return { success: false, error: error.message, duration: 0 };
  }
}

// Smart ADD for multiple requests
async function smartMultipleAdd(requests) {
  console.log(`\n🧠 SMART MULTIPLE ADD - Processing ${requests.length} requests...`);
  console.log('='.repeat(60));
  
  const results = [];
  
  for (let i = 0; i < requests.length; i++) {
    const req = requests[i];
    console.log(`\n📱 [${i + 1}/${requests.length}] SMART ADD: ${req.parentPhone} + ${req.tumbalPhone}`);
    console.log('='.repeat(40));
    
    try {
      const result = await smartAdd(req.parentPhone, req.tumbalPhone, req.alias || 'TUMBAL');
      results.push({ ...req, ...result });
    } catch (error) {
      console.log(`💥 EXCEPTION: ${error.message}`);
      results.push({ ...req, success: false, error: error.message });
    }
    
    // Wait between requests
    if (i < requests.length - 1) {
      console.log('⏳ Waiting 3 seconds before next request...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }
  
  // Summary
  console.log('\n📊 SMART ADD SUMMARY:');
  console.log('='.repeat(60));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`✅ Successful: ${successful.length}/${results.length}`);
  console.log(`❌ Failed: ${failed.length}/${results.length}`);
  
  if (successful.length > 0) {
    console.log('\n🟢 SUCCESSFUL REQUESTS:');
    successful.forEach((r, index) => {
      console.log(`  ${index + 1}. ${r.parentPhone} + ${r.tumbalPhone}`);
      console.log(`     🎯 Slot: ${r.autoGenerated?.slotId}, Duration: ${r.totalDuration}ms`);
    });
  }
  
  if (failed.length > 0) {
    console.log('\n🔴 FAILED REQUESTS:');
    failed.forEach((r, index) => {
      console.log(`  ${index + 1}. ${r.parentPhone} + ${r.tumbalPhone}: ${r.error} (Step: ${r.step})`);
    });
  }
  
  return results;
}

// Test CEKSLOT API (original function for reference)
async function testCekSlot(phone) {
  console.log('\n🔄 Testing CEKSLOT API...');
  console.log(`📱 Phone: ${phone}`);
  console.log(`⏰ Time: ${getTimestamp()}`);
  console.log('-'.repeat(50));
  
  try {
    const startTime = Date.now();
    const result = await getSlotInfoAPI1Only(phone);
    const duration = Date.now() - startTime;
    
    console.log(`⏱️  Response Time: ${duration}ms`);
    
    if (result.success) {
      console.log('✅ SUCCESS - CEKSLOT API Response:');
      console.log(`📊 Total Slots: ${result.slots ? result.slots.length : 0}`);
      
      if (result.slots && result.slots.length > 0) {
        console.log('\n📋 SLOT DETAILS:');
        
        result.slots.forEach((slot, index) => {
          const isEmpty = (!slot.alias || slot.alias === '-') && 
                         (!slot.msisdn || slot.msisdn === '-');
          const status = isEmpty ? '🟢 EMPTY' : '🔴 FILLED';
          
          console.log(`\n  Slot ${slot.slot_id}: ${status}`);
          console.log(`    📱 MSISDN: ${slot.msisdn || '-'}`);
          console.log(`    👤 Alias: ${slot.alias || '-'}`);
          console.log(`    🆔 Member ID: ${slot.family_member_id ? slot.family_member_id.substring(0, 20) + '...' : '-'}`);
          console.log(`    🎯 Add Chances: ${slot.add_chances || 0}`);
        });
        
        const emptySlots = result.slots.filter(slot => 
          (!slot.alias || slot.alias === '-') && 
          (!slot.msisdn || slot.msisdn === '-')
        );
        
        console.log(`\n📈 SUMMARY:`);
        console.log(`  🟢 Empty Slots: ${emptySlots.length}`);
        console.log(`  🔴 Filled Slots: ${result.slots.length - emptySlots.length}`);
        console.log(`  📊 Total Slots: ${result.slots.length}`);
      }
    } else {
      console.log('❌ FAILED - CEKSLOT API Error:');
      console.log(`💬 Error: ${result.error || 'Unknown error'}`);
    }
    
  } catch (error) {
    console.log('💥 EXCEPTION:');
    console.log(`📛 Error: ${error.message}`);
  }
  
  console.log('-'.repeat(50));
}

// Smart KICK function - Show members and let user choose
async function smartKick(parentPhone) {
  console.log('\n🧠 SMART KICK - Show members and choose...');
  console.log(`📱 Parent: ${parentPhone}`);
  console.log(`⏰ Time: ${getTimestamp()}`);
  console.log('-'.repeat(50));
  
  try {
    // Step 1: Get slot info to show all members
    console.log('🔍 Step 1: Getting member list from CEKSLOT API...');
    const startTime = Date.now();
    const slotResult = await getSlotInfoAPI1Only(normalizePhone(parentPhone));
    const cekslotDuration = Date.now() - startTime;
    
    console.log(`⏱️  CEKSLOT Response Time: ${cekslotDuration}ms`);
    
    if (!slotResult.success) {
      console.log('❌ CEKSLOT failed, cannot show members');
      console.log(`💬 Error: ${slotResult.error}`);
      return { success: false, error: slotResult.error, step: 'CEKSLOT' };
    }
    
    // Step 2: Filter slots that have members (not empty)
    const filledSlots = slotResult.slots.filter(slot => 
      (slot.alias && slot.alias !== '-') || 
      (slot.msisdn && slot.msisdn !== '-')
    );
    
    console.log(`📊 Found ${slotResult.slots.length} total slots, ${filledSlots.length} filled slots`);
    
    if (filledSlots.length === 0) {
      console.log('❌ No members found to kick');
      return { success: false, error: 'No members found', step: 'MEMBER_CHECK' };
    }
    
    // Step 3: Display all members with numbered list
    console.log('\n👥 REGISTERED MEMBERS:');
    console.log('='.repeat(60));
    
    filledSlots.forEach((slot, index) => {
      console.log(`${index + 1}. Slot ${slot.slot_id}`);
      console.log(`   📱 MSISDN: ${slot.msisdn || '-'}`);
      console.log(`   👤 Alias: ${slot.alias || '-'}`);
      console.log(`   🆔 Member ID: ${slot.family_member_id ? slot.family_member_id.substring(0, 30) + '...' : '-'}`);
      console.log('');
    });
    
    console.log('='.repeat(60));
    
    // Step 4: Let user choose which member to kick
    const choice = await ask(`Choose member number to KICK (1-${filledSlots.length}) or 0 to cancel: `);
    const choiceNum = parseInt(choice);
    
    if (choiceNum === 0) {
      console.log('❌ Cancelled by user');
      return { success: false, error: 'Cancelled by user', step: 'USER_CANCEL' };
    }
    
    if (isNaN(choiceNum) || choiceNum < 1 || choiceNum > filledSlots.length) {
      console.log('❌ Invalid choice');
      return { success: false, error: 'Invalid choice', step: 'INVALID_CHOICE' };
    }
    
    const selectedSlot = filledSlots[choiceNum - 1];
    const memberToKick = selectedSlot.family_member_id;
    
    console.log(`\n🎯 Selected member to KICK:`);
    console.log(`   📱 MSISDN: ${selectedSlot.msisdn}`);
    console.log(`   👤 Alias: ${selectedSlot.alias}`);
    console.log(`   🎯 Slot: ${selectedSlot.slot_id}`);
    
    // Step 5: Execute KICK API
    console.log('\n🚀 Step 2: Executing KICK API...');
    const kickResult = await executeKick(normalizePhone(parentPhone), memberToKick);
    
    return {
      success: kickResult.success,
      cekslotDuration,
      kickDuration: kickResult.duration,
      totalDuration: Date.now() - startTime,
      memberInfo: {
        msisdn: selectedSlot.msisdn,
        alias: selectedSlot.alias,
        slotId: selectedSlot.slot_id,
        memberId: memberToKick
      },
      kickResult: kickResult.data,
      error: kickResult.error,
      step: kickResult.success ? 'COMPLETED' : 'KICK'
    };
    
  } catch (error) {
    console.log('💥 SMART KICK EXCEPTION:');
    console.log(`📛 Error: ${error.message}`);
    return { success: false, error: error.message, step: 'EXCEPTION' };
  }
}

// Execute KICK API (helper function)
async function executeKick(parentPhone, memberId) {
  const axios = require('axios');
  
  try {
    const url = process.env.API1 + process.env.KICK1;
    const data = {
      token: process.env.APIKEY1,
      id_parent: parentPhone,
      member_id: memberId  // KICK menggunakan member_id (bukan family_member_id)
    };
    
    console.log('📤 Sending KICK request...');
    console.log('🔧 API URL:', url);
    console.log('📋 Request data:', {
      token: process.env.APIKEY1.substring(0, 10) + '...',
      id_parent: parentPhone,
      member_id: memberId.substring(0, 20) + '...'
    });
    
    const startTime = Date.now();
    
    const response = await axios.post(url, new URLSearchParams(data), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      timeout: 25000
    });
    
    const duration = Date.now() - startTime;
    console.log(`⏱️  KICK Response Time: ${duration}ms`);
    
    if (response.data?.status === 'success' || response.data?.success === true || response.data?.status === true) {
      console.log('✅ KICK SUCCESS:');
      console.log(`📋 Response:`, JSON.stringify(response.data, null, 2));
      return { success: true, data: response.data, duration };
    } else {
      console.log('❌ KICK FAILED:');
      console.log(`📋 Response:`, JSON.stringify(response.data, null, 2));
      return { success: false, data: response.data, error: response.data?.message || 'KICK failed', duration };
    }
    
  } catch (error) {
    console.log('💥 KICK EXCEPTION:');
    console.log(`📛 Error: ${error.message}`);
    if (error.response) {
      console.log(`📋 Response Data:`, error.response.data);
    }
    return { success: false, error: error.message, duration: 0 };
  }
}

// Question helper
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// Main menu
async function showMenu() {
  console.clear();
  console.log('🧠 ===== SMART API TESTER (AUTO-GENERATE PARAMETERS) =====');
  console.log('1. Test CEKSLOT API (View slot info)');
  console.log('2. Smart ADD API (Auto: parent+tumbal → auto slot_id/member_id)');  
  console.log('3. Smart Multiple ADD (Batch processing)');
  console.log('4. Smart KICK API (Auto: show members → choose → kick)');
  console.log('5. Exit');
  console.log('===========================================================');
  
  const choice = await ask('Choose option (1-5): ');
  
  switch (choice) {
    case '1':
      console.log('\n📱 CEKSLOT API Test');
      const phone = await ask('Enter phone number: ');
      if (phone) {
        await testCekSlot(phone);
      } else {
        console.log('❌ No phone number entered');
      }
      
      await ask('\nPress Enter to continue...');
      await showMenu();
      break;
      
    case '2':
      console.log('\n🧠 Smart ADD API Test');
      console.log('💡 Only need: parent_phone + tumbal_phone');
      console.log('🤖 System will auto-generate: slot_id, member_id, alias');
      
      const parentPhone = await ask('Enter parent phone: ');
      const tumbalPhone = await ask('Enter tumbal phone: ');
      const customAlias = await ask('Enter alias (default: TUMBAL): ') || 'TUMBAL';
      
      if (parentPhone && tumbalPhone) {
        await smartAdd(parentPhone, tumbalPhone, customAlias);
      } else {
        console.log('❌ Parent phone and tumbal phone are required');
      }
      
      await ask('\nPress Enter to continue...');
      await showMenu();
      break;
      
    case '3':
      console.log('\n🧠 Smart Multiple ADD Test');
      console.log('💡 Enter multiple requests, one per line');
      console.log('Format: parent_phone,tumbal_phone,alias(optional)');
      console.log('Example:');
      console.log('085946312953,6281234567890,TUMBAL1');
      console.log('085946312954,6281234567891,TUMBAL2');
      console.log('(alias is optional, default: TUMBAL)');
      
      const multiInput = await ask('Enter requests (one per line): ');
      const lines = parseMultiInput(multiInput);
      
      if (lines.length === 0) {
        console.log('❌ No valid requests entered');
      } else {
        const requests = lines.map(line => {
          const parts = line.split(',').map(p => p.trim());
          return {
            parentPhone: parts[0] || '',
            tumbalPhone: parts[1] || '',
            alias: parts[2] || 'TUMBAL'
          };
        }).filter(req => req.parentPhone && req.tumbalPhone);
        
        if (requests.length > 0) {
          console.log(`\n🎯 Parsed ${requests.length} valid requests:`);
          requests.forEach((req, i) => {
            console.log(`  ${i + 1}. ${req.parentPhone} + ${req.tumbalPhone} (${req.alias})`);
          });
          
          const confirm = await ask('\nProceed with these requests? (y/n): ');
          if (confirm.toLowerCase() === 'y' || confirm.toLowerCase() === 'yes') {
            await smartMultipleAdd(requests);
          } else {
            console.log('❌ Cancelled by user');
          }
        } else {
          console.log('❌ No valid requests parsed');
        }
      }
      
      await ask('\nPress Enter to continue...');
      await showMenu();
      break;
      
    case '4':
      // Smart KICK - Show members and choose
      console.log('\n🧠 Smart KICK Test');
      console.log('💡 Shows all registered members and let you choose who to kick');
      console.log('🎯 Auto-generates parameters from CEKSLOT API');
      
      const kickParentPhone = await ask('Enter parent phone: ');
      
      if (kickParentPhone) {
        console.log('\n🚀 Starting SMART KICK...');
        console.log('⚡ This will show all registered members and let you choose who to kick');
        
        const kickResult = await smartKick(kickParentPhone);
        console.log('\n📊 SMART KICK RESULT:');
        console.log('='.repeat(60));
        
        if (kickResult.success) {
          console.log('✅ SMART KICK SUCCESSFUL!');
          console.log(`⏱️  Total Duration: ${kickResult.totalDuration}ms`);
          console.log(`   └── CEKSLOT: ${kickResult.cekslotDuration}ms`);
          console.log(`   └── KICK: ${kickResult.kickDuration}ms`);
          console.log(`📱 Parent: ${kickParentPhone}`);
          console.log(`👤 Kicked Member:`);
          console.log(`   📱 MSISDN: ${kickResult.memberInfo.msisdn}`);
          console.log(`   👤 Alias: ${kickResult.memberInfo.alias}`);
          console.log(`   🎰 Slot: ${kickResult.memberInfo.slotId}`);
          console.log(`📋 Final Result:`, JSON.stringify(kickResult.kickResult, null, 2));
        } else {
          console.log('❌ SMART KICK FAILED!');
          console.log(`💥 Error: ${kickResult.error}`);
          console.log(`📍 Failed at: ${kickResult.step}`);
          if (kickResult.kickResult) {
            console.log(`📋 KICK Result:`, JSON.stringify(kickResult.kickResult, null, 2));
          }
        }
        
        console.log('='.repeat(60));
      } else {
        console.log('❌ Parent phone is required');
      }
      
      await ask('\nPress Enter to continue...');
      await showMenu();
      break;
      
    case '5':
      console.log('👋 Goodbye!');
      rl.close();
      process.exit(0);
      break;
      
    default:
      console.log('❌ Invalid option');
      await ask('Press Enter to continue...');
      await showMenu();
  }
}

// Start the smart tester
console.log('🧠 Starting Smart API Tester...');
console.log('🤖 Auto-generates slot_id, member_id, alias from CEKSLOT API');
console.log('📋 Environment check...');
console.log(`API1: ${process.env.API1 ? '✅' : '❌'}`);
console.log(`CEKSLOT1: ${process.env.CEKSLOT1 ? '✅' : '❌'}`);
console.log(`ADD1: ${process.env.ADD1 ? '✅' : '❌'}`);
console.log(`APIKEY1: ${process.env.APIKEY1 ? '✅' : '❌'}`);
console.log('');

setTimeout(() => {
  showMenu();
}, 1000);

// Handle Ctrl+C
process.on('SIGINT', () => {
  console.log('\n\n👋 Goodbye!');
  process.exit(0);
});
